"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# .env 파일에서 환경 변수 로드
load_dotenv()

# 프로젝트 기본 경로 설정 (모든 파일 경로의 기준점)
BASE_DIR = Path(__file__).resolve().parent.parent

# 토큰 만료 시간 설정 (2시간)
TOKEN_EXPIRED_AFTER_SECONDS = 7200  # 2시간

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# 디버그 모드 설정 (SECRET_KEY 검증보다 먼저 정의되어야 함)
DEBUG = os.environ.get("DEBUG", "True") == "True"

# 보안 키 설정 (.env 파일에서 로드하거나 기본값 사용)
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    if DEBUG:
        # 개발 환경에서만 기본 키 사용
        SECRET_KEY = "django-insecure-dev-only-key"
    else:
        # 프로덕션 환경에서는 반드시 환경변수 설정 필요
        raise ValueError(
            "SECRET_KEY 환경변수가 설정되지 않았습니다. 프로덕션 환경에서는 필수입니다."
        )

# 접근 허용 호스트 설정
ALLOWED_HOSTS = os.environ.get(
    "ALLOWED_HOSTS", "localhost,127.0.0.1,healthcheck.railway.app,.railway.app"
).split(",")

# 디버깅용: ALLOWED_HOSTS 출력
# print(f"🔍 [DEBUG] ALLOWED_HOSTS: {ALLOWED_HOSTS}")
# print(f"🔍 [DEBUG] DEBUG 모드: {DEBUG}")
# print(f"🔍 [DEBUG] SECRET_KEY 길이: {len(SECRET_KEY) if SECRET_KEY else 0}")


# Application definition

# 설치된 앱 목록 (Django 기본 앱, 서드파티 앱, 로컬 앱 포함)
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",  # Django REST Framework
    "corsheaders",  # CORS 지원
    "rest_framework.authtoken",  # 토큰 기반 인증
    "django_apscheduler",  # Django APScheduler for background tasks
    # Local apps
    "core",  # 핵심 모델
    "api",  # API 앱
]

# 미들웨어 설정 (요청 처리 파이프라인)
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # 정적 파일 서빙 (프로덕션용)
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS 미들웨어 (API 요청 허용)
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "api.middleware.SingleSessionMiddleware",  # 중복 로그인 방지 미들웨어
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api.middleware.UserAccessMiddleware",  # 사용자 접근 제어 미들웨어
]

# CORS 설정 (프론트엔드에서 API 접근 허용)
CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
).split(",")

# 프로덕션 환경에서 Vercel 도메인 패턴 허용
if not DEBUG:
    # 허용된 도메인 패턴들
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://.*\.vercel\.app$",  # 모든 *.vercel.app 도메인 허용
        r"^https://pms-murex\.vercel\.app$",  # 메인 도메인
        r"^https://www\.mullidan\.xyz$",  # 새로운 프로덕션 도메인
        r"^https://mullidan\.xyz$",  # www 없는 버전도 허용
    ]
else:
    CORS_ALLOWED_ORIGIN_REGEXES = []

# CORS 추가 설정
CORS_ALLOW_CREDENTIALS = True  # 쿠키와 인증 정보 허용

# 메인 URL 설정
ROOT_URLCONF = "config.urls"

# 템플릿 설정
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI 설정 (웹 서버와 연결)
WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# 데이터베이스 설정 (PostgreSQL 사용)
# 환경변수 디버깅 (Railway 배포 시 확인용)
DATABASE_URL = os.environ.get("DATABASE_URL")
# print(f"🔍 [DEBUG] DATABASE_URL 환경변수: {DATABASE_URL}")

# # Railway 환경에서 DATABASE_URL 확인
# if DATABASE_URL:
#     print(f"✅ [DEBUG] DATABASE_URL 발견: {DATABASE_URL[:50]}...")
# else:
#     print("❌ [DEBUG] DATABASE_URL 환경변수가 설정되지 않음")
#     # 다른 환경변수들 확인 (Railway에서 제공하는 개별 변수들)
#     pghost = os.environ.get("PGHOST")
#     pgport = os.environ.get("PGPORT")
#     pguser = os.environ.get("PGUSER")
#     pgpassword = os.environ.get("PGPASSWORD")
#     pgdatabase = os.environ.get("PGDATABASE")

#     print(f"🔍 [DEBUG] PGHOST: {pghost}")
#     print(f"🔍 [DEBUG] PGPORT: {pgport}")
#     print(f"🔍 [DEBUG] PGUSER: {pguser}")
#     print(f"🔍 [DEBUG] PGPASSWORD: {'*' * len(pgpassword) if pgpassword else 'None'}")
#     print(f"🔍 [DEBUG] PGDATABASE: {pgdatabase}")

#     # 개별 환경변수들로 DATABASE_URL 구성
#     if all([pghost, pgport, pguser, pgpassword, pgdatabase]):
#         DATABASE_URL = (
#             f"postgres://{pguser}:{pgpassword}@{pghost}:{pgport}/{pgdatabase}"
#         )
#         print(f"✅ [DEBUG] DATABASE_URL 자동 구성: {DATABASE_URL[:50]}...")

# 프로덕션 환경에서는 DATABASE_URL이 반드시 있어야 함
# if not DEBUG and not DATABASE_URL:
#     raise ValueError(
#         "프로덕션 환경에서는 DATABASE_URL 환경변수가 반드시 설정되어야 합니다."
#     )

# 데이터베이스 연결 설정
try:
    DATABASES = {
        "default": dj_database_url.config(
            default=DATABASE_URL or "postgres://postgres:postgres@localhost:5432/pms",
            conn_max_age=600,
            # conn_health_checks=True,  # 연결 상태 확인 추가
            conn_health_checks=False,  # 연결 상태 확인 비활성화
        )
    }
    print(
        f"✅ [DEBUG] 데이터베이스 설정 완료: {DATABASES['default']['HOST']}:{DATABASES['default']['PORT']}"
    )
except Exception as e:
    print(f"❌ [DEBUG] 데이터베이스 설정 오류: {e}")
    if not DEBUG:
        raise


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# 비밀번호 검증 설정
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# 국제화 설정 (한국어, 서울 시간대)
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# 정적 파일 설정
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# WhiteNoise 정적 파일 스토리지 (프로덕션용)
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# 미디어 파일 설정
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# 기본 키 필드 타입
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 사용자 정의 모델 설정
AUTH_USER_MODEL = "core.User"

# Django REST Framework 설정
REST_FRAMEWORK = {
    # 인증 클래스 설정 (토큰 인증, 세션 인증 지원)
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    # 기본 권한 설정 (인증된 사용자만 접근 가능)
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # 페이지네이션 설정
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,  # 기본 페이지 크기를 100으로 증가
    "PAGE_SIZE_QUERY_PARAM": "page_size",  # 페이지 크기를 동적으로 조정할 수 있는 파라미터
    "MAX_PAGE_SIZE": 1000,  # 최대 페이지 크기 설정
}

# 세션 설정
SESSION_COOKIE_AGE = 720000  # 100시간 (초 단위)
SESSION_SAVE_EVERY_REQUEST = True  # 매 요청마다 세션 갱신

# 프로덕션 보안 설정
if not DEBUG:
    # Railway 프록시 헤더 신뢰 설정 (무한 리다이렉트 방지)
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

    # HTTPS 설정 (Railway 환경에서는 SSL 리다이렉트 비활성화)
    SECURE_SSL_REDIRECT = False  # Railway에서는 프록시가 HTTPS 처리
    # Railway 환경에서는 내부 HTTP → 외부 HTTPS 변환이므로 Django 레벨에서 리다이렉트 불필요

    SECURE_HSTS_SECONDS = 31536000  # HSTS 헤더 설정 (1년)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # 서브도메인에도 HSTS 적용
    SECURE_HSTS_PRELOAD = True  # HSTS 프리로드 목록에 추가 가능

    # 쿠키 보안 설정
    SESSION_COOKIE_SECURE = True  # HTTPS에서만 세션 쿠키 전송
    CSRF_COOKIE_SECURE = True  # HTTPS에서만 CSRF 쿠키 전송
    SESSION_COOKIE_HTTPONLY = True  # JavaScript에서 세션 쿠키 접근 불가
    CSRF_COOKIE_HTTPONLY = True  # JavaScript에서 CSRF 쿠키 접근 불가

    # 기타 보안 헤더
    SECURE_CONTENT_TYPE_NOSNIFF = True  # MIME 타입 스니핑 방지
    SECURE_BROWSER_XSS_FILTER = True  # XSS 필터 활성화
    X_FRAME_OPTIONS = "DENY"  # 클릭재킹 방지

    # 관리자 URL 보안 강화
    ADMIN_URL = os.environ.get("ADMIN_URL", "admin/")  # 관리자 URL 커스터마이징

    # 에러 로그 보안 설정
    ADMINS = [
        # 실제 적용 - 관리자 이메일 설정 (에러 발생 시 알림)
        # ("Admin Name", "admin@yourdomain.com"),
    ]

    # 디버그 정보 완전 비활성화
    DEBUG_PROPAGATE_EXCEPTIONS = False

    # 보안 미들웨어 추가
    MIDDLEWARE.insert(0, "django.middleware.security.SecurityMiddleware")

    # 정적 파일 보안 설정 (WhiteNoise 사용)
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    # 로그 레벨 강화는 LOGGING 설정 이후에 적용 (아래로 이동됨)

# 로그 디렉토리 생성 (프로덕션 환경에서 필요)
LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# 로깅 설정
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # 로그 포맷 설정
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {asctime} {message}",
            "style": "{",
        },
    },
    # 로그 핸들러 설정
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    # 로거 설정 (프로덕션에서는 콘솔 로깅만 사용)
    "loggers": {
        # Django 기본 로거
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        # 각 앱별 로거
        "api": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "api.auth": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "auth": {
            "handlers": ["console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}

# 파일 로깅을 개발/프로덕션 환경 모두에서 사용 (Railway 환경 고려)
LOGGING["handlers"].update(
    {
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "django.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "auth_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "auth.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "api_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "api.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "excel_upload_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "excel_upload.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
    }
)

# 파일 핸들러를 모든 환경에서 추가
LOGGING["loggers"]["django"]["handlers"].append("file")
LOGGING["loggers"]["django.request"]["handlers"].append("file")
LOGGING["loggers"]["api"]["handlers"].append("api_file")
LOGGING["loggers"]["api.auth"]["handlers"].append("auth_file")
LOGGING["loggers"]["auth"]["handlers"].append("auth_file")

# 엑셀 업로드 전용 로거 추가
LOGGING["loggers"]["api.excel_upload"] = {
    "handlers": ["console", "excel_upload_file"],
    "level": "DEBUG" if DEBUG else "INFO",
    "propagate": False,
}

# 프로덕션 환경에서 로그 레벨 강화 (LOGGING 정의 이후 적용)
if not DEBUG:
    # 일반 로그들은 WARNING 레벨로 조정 (엑셀 업로드 제외)
    for logger_name in ["django", "django.request", "api", "api.auth", "auth"]:
        if logger_name in LOGGING["loggers"]:
            LOGGING["loggers"][logger_name][
                "level"
            ] = "WARNING"  # 프로덕션에서는 WARNING 레벨 이상만 로그

    # 엑셀 업로드 로거는 INFO 레벨 유지 (중요한 업로드 정보 보존)
    if "api.excel_upload" in LOGGING["loggers"]:
        LOGGING["loggers"]["api.excel_upload"]["level"] = "INFO"

# Django APScheduler 설정
SCHEDULER_CONFIG = {
    "apscheduler.executors.default": {
        "class": "apscheduler.executors.pool:ThreadPoolExecutor",
        "max_workers": "20",
    },
    "apscheduler.executors.processpool": {
        "type": "processpool",
        "max_workers": "5",
    },
    "apscheduler.job_defaults.coalesce": "false",
    "apscheduler.job_defaults.max_instances": "3",
    "apscheduler.timezone": "Asia/Seoul",  # 한국 시간대 설정
}

# APScheduler 데이터베이스 설정 (Django ORM 사용)
SCHEDULER_AUTOSTART = True
