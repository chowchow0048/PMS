"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# .env 파일에서 환경 변수 로드
load_dotenv()

# 프로젝트 기본 경로 설정 (모든 파일 경로의 기준점)
BASE_DIR = Path(__file__).resolve().parent.parent

# 토큰 만료 시간 설정 (2시간)
TOKEN_EXPIRED_AFTER_SECONDS = 7200  # 2시간

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# 보안 키 설정 (.env 파일에서 로드하거나 기본값 사용)
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-6n1aw_)2qdb36$kkhpxsth9wxi8sw$ort#2rdfad86_v1a0t&2"
)

# 디버그 모드 설정 (.env 파일에서 로드하거나 기본값으로 True 사용)
DEBUG = os.environ.get("DEBUG", "True") == "True"

# 접근 허용 호스트 설정
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")


# Application definition

# 설치된 앱 목록 (Django 기본 앱, 서드파티 앱, 로컬 앱 포함)
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",  # Django REST Framework
    "corsheaders",  # CORS 지원
    "rest_framework.authtoken",  # 토큰 기반 인증
    # Local apps
    "core",  # 핵심 모델
    "api",  # API 앱
]

# 미들웨어 설정 (요청 처리 파이프라인)
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS 미들웨어 (API 요청 허용)
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api.middleware.UserAccessMiddleware",  # 사용자 접근 제어 미들웨어
]

# CORS 설정 (프론트엔드에서 API 접근 허용)
CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
).split(",")

# 메인 URL 설정
ROOT_URLCONF = "config.urls"

# 템플릿 설정
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI 설정 (웹 서버와 연결)
WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# 데이터베이스 설정 (PostgreSQL 사용)
DATABASES = {
    "default": dj_database_url.config(
        default=os.environ.get(
            "DATABASE_URL", "postgres://postgres:postgres@localhost:5432/pms"
        ),
        conn_max_age=600,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# 비밀번호 검증 설정
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# 국제화 설정 (한국어, 서울 시간대)
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# 정적 파일 설정
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# 미디어 파일 설정
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# 기본 키 필드 타입
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 사용자 정의 모델 설정
AUTH_USER_MODEL = "core.User"

# Django REST Framework 설정
REST_FRAMEWORK = {
    # 인증 클래스 설정 (토큰 인증, 세션 인증 지원)
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    # 기본 권한 설정 (인증된 사용자만 접근 가능)
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # 페이지네이션 설정
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,  # 기본 페이지 크기를 100으로 증가
    "PAGE_SIZE_QUERY_PARAM": "page_size",  # 페이지 크기를 동적으로 조정할 수 있는 파라미터
    "MAX_PAGE_SIZE": 1000,  # 최대 페이지 크기 설정
}

# 세션 설정
SESSION_COOKIE_AGE = 7200  # 2시간 (초 단위)
SESSION_SAVE_EVERY_REQUEST = True  # 매 요청마다 세션 갱신

# 로깅 설정
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # 로그 포맷 설정
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {asctime} {message}",
            "style": "{",
        },
    },
    # 로그 핸들러 설정
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "django.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "auth_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "auth.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "api_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "api.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
    },
    # 로거 설정 (각 모듈별 로깅 설정)
    "loggers": {
        # Django 기본 로거
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # 각 앱별 로거
        "api": {
            "handlers": ["console", "api_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "api.auth": {
            "handlers": ["console", "auth_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "auth": {
            "handlers": ["console", "auth_file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
