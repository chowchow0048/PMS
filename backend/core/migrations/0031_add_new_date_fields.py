# Generated by Django 5.0.3 on 2025-08-06 00:14

from django.db import migrations, models


def cleanup_duplicate_attendance_before_constraint(apps, schema_editor):
    """
    unique 제약 조건 생성 전에 중복 데이터를 정리합니다.
    Railway 콘솔 접속 불가 시를 위한 마이그레이션 내 정리 로직
    """
    ClinicAttendance = apps.get_model('core', 'ClinicAttendance')
    
    print("🔍 [마이그레이션] 중복 출석 데이터 정리 시작...")
    
    # 1. 비활성화된 데이터 삭제
    inactive_count = ClinicAttendance.objects.filter(is_active=False).count()
    if inactive_count > 0:
        print(f"📊 [마이그레이션] 비활성화된 데이터 {inactive_count}개 삭제 중...")
        ClinicAttendance.objects.filter(is_active=False).delete()
    
    # 2. 중복 데이터 정리 - SQL 직접 실행
    from django.db import connection
    with connection.cursor() as cursor:
        # 중복 데이터 확인
        cursor.execute("""
            SELECT 
                clinic_id, 
                student_id, 
                expected_clinic_date,
                COUNT(*) as count
            FROM core_clinicattendance 
            GROUP BY clinic_id, student_id, expected_clinic_date
            HAVING COUNT(*) > 1
            LIMIT 5
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"📊 [마이그레이션] 중복 데이터 발견: {len(duplicates)}개 그룹")
            for clinic_id, student_id, date, count in duplicates:
                print(f"  - 클리닉 {clinic_id}, 학생 {student_id}, 날짜 {date}: {count}개")
        
        # 중복 데이터 정리 (가장 최근 것만 유지)
        cursor.execute("""
            WITH duplicate_rows AS (
                SELECT id,
                       ROW_NUMBER() OVER (
                           PARTITION BY clinic_id, student_id, expected_clinic_date 
                           ORDER BY created_at DESC
                       ) as rn
                FROM core_clinicattendance
            )
            DELETE FROM core_clinicattendance 
            WHERE id IN (
                SELECT id FROM duplicate_rows WHERE rn > 1
            )
        """)
        deleted_count = cursor.rowcount
        
        if deleted_count > 0:
            print(f"✅ [마이그레이션] {deleted_count}개 중복 데이터 정리 완료")
        else:
            print("✅ [마이그레이션] 중복 데이터가 없습니다")
    
    print("🎉 [마이그레이션] 중복 데이터 정리 완료!")


def reverse_cleanup_duplicate_attendance(apps, schema_editor):
    """역방향 마이그레이션 - 실제로는 복구할 수 없으므로 경고만 출력"""
    print("⚠️ [마이그레이션] 중복 데이터 정리는 되돌릴 수 없습니다.")


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0030_alter_clinicattendance_date"),
    ]

    operations = [
        # 🚨 중요: unique 제약 조건 생성 전에 중복 데이터를 먼저 정리
        migrations.RunPython(
            cleanup_duplicate_attendance_before_constraint,
            reverse_cleanup_duplicate_attendance,
        ),
        # 먼저 기존 unique_together 제거 (date 필드가 포함되어 있음)
        migrations.AlterUniqueTogether(
            name="clinicattendance",
            unique_together=set(),
        ),
        # 기존 인덱스들 제거
        migrations.RemoveIndex(
            model_name="clinicattendance",
            name="core_clinic_student_ebaed1_idx",
        ),
        migrations.RemoveIndex(
            model_name="clinicattendance",
            name="core_clinic_clinic__529a2b_idx",
        ),
        # 기존 date 필드 제거
        migrations.RemoveField(
            model_name="clinicattendance",
            name="date",
        ),
        # 새 필드들 추가
        migrations.AddField(
            model_name="clinicattendance",
            name="actual_attendance_date",
            field=models.DateField(
                blank=True,
                help_text="실제로 출석을 체크한 날짜. 출석 상태를 업데이트할 때만 설정됨.",
                null=True,
                verbose_name="실제 출석 체크 날짜",
            ),
        ),
        migrations.AddField(
            model_name="clinicattendance",
            name="expected_clinic_date",
            field=models.DateField(
                default="2025-01-01",
                help_text="해당 주에서 클리닉이 열리는 예상 날짜 (클리닉 요일 기준으로 계산됨)",
                verbose_name="예상 클리닉 날짜",
            ),
        ),
        migrations.AddField(
            model_name="clinicattendance",
            name="reservation_date",
            field=models.DateField(
                default="2025-01-01",
                help_text="클리닉 예약을 생성한 날짜 (언제 예약했는지)",
                verbose_name="예약 생성 날짜",
            ),
        ),
        # 새 필드들이 추가된 후에 unique_together 변경
        migrations.AlterUniqueTogether(
            name="clinicattendance",
            unique_together={("clinic", "student", "expected_clinic_date")},
        ),
        # 모델 옵션 변경
        migrations.AlterModelOptions(
            name="clinicattendance",
            options={
                "ordering": ["-expected_clinic_date", "-created_at"],
                "verbose_name": "클리닉 출석",
                "verbose_name_plural": "클리닉 출석",
            },
        ),
        # 새 인덱스들 추가
        migrations.AddIndex(
            model_name="clinicattendance",
            index=models.Index(
                fields=["student", "-expected_clinic_date"],
                name="core_clinic_student_8324bf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="clinicattendance",
            index=models.Index(
                fields=["clinic", "-expected_clinic_date"],
                name="core_clinic_clinic__80296d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="clinicattendance",
            index=models.Index(
                fields=["expected_clinic_date"], name="core_clinic_expecte_f6f35d_idx"
            ),
        ),
    ]
